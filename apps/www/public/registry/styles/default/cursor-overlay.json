{
  "dependencies": [],
  "files": [
    {
      "content": "import React from 'react';\n\nimport { cn } from '@udecode/cn';\nimport { createZustandStore } from '@udecode/plate-common';\nimport {\n  type CursorData,\n  CursorOverlay as CursorOverlayPrimitive,\n  type CursorOverlayProps,\n  type CursorProps,\n} from '@udecode/plate-cursor';\n\nexport const cursorStore = createZustandStore('cursor')({\n  cursors: {},\n});\n\nexport function Cursor({\n  caretPosition,\n  classNames,\n  data,\n  disableCaret,\n  disableSelection,\n  selectionRects,\n}: CursorProps<CursorData>) {\n  if (!data) {\n    return null;\n  }\n\n  const { style, selectionStyle = style } = data;\n\n  return (\n    <>\n      {!disableSelection &&\n        selectionRects.map((position, i) => (\n          <div\n            className={cn(\n              'pointer-events-none absolute z-10 opacity-30',\n              classNames?.selectionRect\n            )}\n            key={i}\n            style={{\n              ...selectionStyle,\n              ...position,\n            }}\n          />\n        ))}\n      {!disableCaret && caretPosition && (\n        <div\n          className={cn(\n            'pointer-events-none absolute z-10 w-0.5',\n            classNames?.caret\n          )}\n          style={{ ...caretPosition, ...style }}\n        />\n      )}\n    </>\n  );\n}\n\nexport function CursorOverlay({ cursors, ...props }: CursorOverlayProps) {\n  const dynamicCursors = cursorStore.use.cursors();\n\n  const allCursors = { ...cursors, ...dynamicCursors };\n\n  return (\n    <CursorOverlayPrimitive\n      {...props}\n      cursors={allCursors}\n      onRenderCursor={Cursor}\n    />\n  );\n}\n",
      "name": "cursor-overlay.tsx"
    }
  ],
  "name": "cursor-overlay",
  "registryDependencies": [],
  "type": "components:plate-ui"
}